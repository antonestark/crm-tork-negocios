import { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';

export async function fetchUserGlobalPermissions(userId: string) {
  const { data, error } = await supabase
    .from('user_permissions')
    .select(`
      permission_id,
      permissions:permissions (
        id,
        code,
        name,
        description
      )
    `)
    .eq('user_id', userId);

  if (error) {
    console.error('Erro ao buscar permiss천es globais:', error);
    return [];
  }

  return data.map((item: any) => ({
    id: item.permissions.id,
    code: item.permissions.code,
    name: item.permissions.name,
    description: item.permissions.description,
  }));
}

export async function addGlobalPermissionToUser(userId: string, permissionId: string) {
  const { error } = await supabase
    .from('user_permissions')
    .insert({
      user_id: userId,
      permission_id: permissionId,
    });

  if (error) {
    console.error('Erro ao adicionar permiss찾o global:', error);
    throw error;
  }
}

export async function removeGlobalPermissionFromUser(userId: string, permissionId: string) {
  const { error } = await supabase
    .from('user_permissions')
    .delete()
    .eq('user_id', userId)
    .eq('permission_id', permissionId);

  if (error) {
    console.error('Erro ao remover permiss찾o global:', error);
    throw error;
  }
}

// Fetch department permissions based on the department_permissions table
export async function fetchDepartmentPermissions(departmentId: number | null | undefined) {
  if (!departmentId) {
    console.log('[useUserPermissions] No departmentId provided, returning empty permissions.');
    return [];
  }

  console.log(`[useUserPermissions] Fetching permissions for departmentId: ${departmentId}`);
  const { data, error } = await supabase
    .from('department_permissions')
    .select('page_code, can_view, can_edit, can_delete') // Select the relevant columns
    .eq('department_id', departmentId);

  if (error) {
    console.error('Erro ao buscar permiss천es do departamento:', error);
    return [];
  }

  console.log(`[useUserPermissions] Raw permissions data for department ${departmentId}:`, data);

  // Transform data into a more usable format, e.g., a map of page_code to actions
  // Example: { 'LEADS': { view: true, edit: false, delete: false }, 'CLIENTS': { ... } }
  const permissionsMap: Record<string, { view: boolean; edit: boolean; delete: boolean }> = {};
  data?.forEach((item: any) => {
    if (item.page_code) {
      permissionsMap[item.page_code] = {
        view: item.can_view ?? false,
        edit: item.can_edit ?? false,
        delete: item.can_delete ?? false,
      };
    }
  });

  console.log(`[useUserPermissions] Processed permissions map for department ${departmentId}:`, permissionsMap);
  return permissionsMap; // Return the map directly
}


export function useUserPermissions(
  userId: string,
  role?: string | null,
  departmentId?: number | null
) {
  // Store permissions as the map generated by fetchDepartmentPermissions
  const [permissions, setPermissions] = useState<Record<string, { view: boolean; edit: boolean; delete: boolean }>>({});
  const [loading, setLoading] = useState(true);

  const fetchPermissions = async () => {
    setLoading(true);
    console.log(`[useUserPermissions Hook] Fetching for userId: ${userId}, role: ${role}, deptId: ${departmentId}`);

    // Admin role bypasses specific permission checks in usePermission hook,
    // but we still fetch department permissions for potential future use or display.
    // No need for special 'ALL_PERMISSIONS' state here if admin check is done elsewhere.

    try {
      const deptPerms = await fetchDepartmentPermissions(departmentId);
      setPermissions(deptPerms);
    } catch (error) {
      console.error("Error fetching department permissions in hook:", error);
      setPermissions({}); // Set empty object on error
    } finally {
      setLoading(false);
      console.log("[useUserPermissions Hook] Finished fetching.");
    }
  };

  useEffect(() => {
    // Fetch only if userId is available. Role/departmentId changes trigger refetch.
    if (userId) {
      fetchPermissions();
    } else {
      // Clear permissions and stop loading if no user ID
      setPermissions({});
      setLoading(false);
    }
  }, [userId, role, departmentId]); // Dependencies ensure refetch on change

  // Return the permissions map and loading state
  return { permissions, loading, reload: fetchPermissions };
}
