// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://nnpvzhalxogrmgdckdmv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5ucHZ6aGFseG9ncm1nZGNrZG12Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAwNzIyMDIsImV4cCI6MjA1NTY0ODIwMn0.eQyjlx6w8bEgJsey92HSDmTZrrIaShzsMLSANsmTzns";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to handle the additional fields from activity_logs
export const activityLogsAdapter = (data: any[]) => {
  return data.map(log => ({
    ...log,
    severity: log.severity || 'low',
    category: log.category || 'system',
    metadata: log.metadata || {}
  }));
};

// Helper function to adapt user data from database to match the User interface
export const userAdapter = (data: any[]) => {
  return data.map(user => ({
    ...user,
    status: user.status || 'active',
    last_login: user.last_login || null,
    settings: user.settings || {},
    metadata: user.metadata || {}
  }));
};

// Helper function to adapt department data
export const departmentAdapter = (data: any[]) => {
  return data.map(dept => ({
    ...dept,
    path: dept.path || null,
    level: dept.level || 0,
    parent_id: dept.parent_id || null,
    manager_id: dept.manager_id || null,
    settings: dept.settings || {},
    metadata: dept.metadata || {},
    manager: Array.isArray(dept.manager) && dept.manager.length > 0 
      ? dept.manager[0] 
      : { first_name: '', last_name: '' }
  }));
};

// Helper function to adapt user department roles
export const userDepartmentRoleAdapter = (data: any[]) => {
  return data.map(role => ({
    id: role.id || '',
    user_id: role.user_id || '',
    department_id: role.department_id || '',
    role: role.role || 'member',
    start_date: role.start_date || null,
    end_date: role.end_date || null,
    created_at: role.created_at || new Date().toISOString(),
    updated_at: role.updated_at || new Date().toISOString(),
    user: role.user ? {
      ...role.user,
      status: role.user.status || 'active',
      last_login: role.user.last_login || null,
      settings: role.user.settings || {},
      metadata: role.user.metadata || {}
    } : null
  }));
};

// Helper function to adapt permission data
export const permissionAdapter = (data: any[]) => {
  return data.map(perm => ({
    id: perm.id || '',
    code: perm.code || '',
    name: perm.name || '',
    description: perm.description || null,
    module: perm.module || '',
    resource_type: perm.resource_type || '',
    actions: perm.actions || [],
    created_at: perm.created_at || new Date().toISOString(),
    selected: perm.selected || false
  }));
};

// Helper function to adapt permission group data
export const permissionGroupAdapter = (data: any[]) => {
  return data.map(group => ({
    id: group.id || '',
    name: group.name || '',
    description: group.description || null,
    is_system: group.is_system || false,
    created_at: group.created_at || new Date().toISOString(),
    updated_at: group.updated_at || new Date().toISOString(),
    selected: group.selected || false,
    permissions: group.permissions || []
  }));
};

// Helper function to adapt user permission data
export const userPermissionAdapter = (data: any[]) => {
  return data.map(up => ({
    id: up.id || '',
    user_id: up.user_id || '',
    permission_id: up.permission_id || '',
    granted_by: up.granted_by || null,
    valid_until: up.valid_until || null,
    created_at: up.created_at || new Date().toISOString(),
    permission: up.permission ? {
      id: up.permission.id || '',
      code: up.permission.code || '',
      name: up.permission.name || '',
      description: up.permission.description || null,
      module: up.permission.module || '',
      resource_type: up.permission.resource_type || '',
      actions: up.permission.actions || [],
      created_at: up.permission.created_at || new Date().toISOString()
    } : null
  }));
};

// Helper function to adapt user permission group data
export const userPermissionGroupAdapter = (data: any[]) => {
  return data.map(upg => ({
    id: upg.id || '',
    user_id: upg.user_id || '',
    group_id: upg.group_id || '',
    created_at: upg.created_at || new Date().toISOString(),
    group: upg.group || null
  }));
};

// Add enhanced mockPermissionData function to match both Permission and UserPermission types
export const mockPermissionData = () => {
  const permissions = [
    {
      id: '1',
      code: 'users:read',
      name: 'View Users',
      description: 'Can view user list and details',
      module: 'users',
      resource_type: 'user',
      actions: ['read'],
      created_at: new Date().toISOString(),
      selected: false
    },
    {
      id: '2',
      code: 'users:write',
      name: 'Edit Users',
      description: 'Can edit user details',
      module: 'users',
      resource_type: 'user',
      actions: ['write'],
      created_at: new Date().toISOString(),
      selected: false
    }
  ];
  
  // Return permissions with shape for Permission interface
  return permissions;
};

// Add enhanced mockUserPermissionData with complete shape
export const mockUserPermissionData = (userId = '1') => {
  const permissions = mockPermissionData();
  return permissions.map(permission => ({
    id: `up-${permission.id}`,
    user_id: userId,
    permission_id: permission.id,
    granted_by: null,
    valid_until: null,
    created_at: new Date().toISOString(),
    permission: permission
  }));
};

// Mocking DepartmentTreeView props data
export const mockDepartmentTreeViewProps = () => {
  return {
    departments: [],
    onEdit: (department: any) => {},
    onDelete: (department: any) => {},
    onViewMembers: (department: any) => {},
    loading: false
  };
};

// Mock data functions for tables that don't exist yet
export const mockPermissionGroupData = () => {
  return [
    {
      id: '1',
      name: 'User Management',
      description: 'Permissions for managing users',
      is_system: true,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      selected: false,
      permissions: []
    },
    {
      id: '2',
      name: 'Department Management',
      description: 'Permissions for managing departments',
      is_system: true,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      selected: false,
      permissions: []
    }
  ];
};

export const mockUserDepartmentRoleData = (userId?: string, departmentId?: string) => {
  return [
    {
      id: '1',
      user_id: userId || '1',
      department_id: departmentId || '1',
      role: 'member',
      start_date: new Date().toISOString(),
      end_date: null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      user: {
        id: userId || '1',
        first_name: 'John',
        last_name: 'Doe',
        role: 'user',
        active: true,
        status: 'active',
        last_login: null,
        profile_image_url: null,
        phone: null,
        department_id: departmentId || '1',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        settings: {},
        metadata: {}
      }
    }
  ];
};

// Function to safely extract email from Json object
export const extractEmail = (json: any): string => {
  if (typeof json === 'object' && json !== null && 'email' in json) {
    return json.email as string;
  } else if (typeof json === 'string') {
    try {
      const parsed = JSON.parse(json);
      if (typeof parsed === 'object' && parsed !== null && 'email' in parsed) {
        return parsed.email as string;
      }
    } catch (e) {
      // Not valid JSON, return empty string
    }
  }
  return '';
};
